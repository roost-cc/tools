#!/usr/bin/env node
const https = require('https')
var progress = require('progress-stream');
const unzip = require('unzip-stream')
const fs = require('fs')
const path = require('path')
const { spawn } = require('child_process');

function usage() {
  console.log(`Usage: download_chromedriver [OPTION...]

  Download and creates a symbolic link to the chrome driver that
  matched google-chrome in the $PATH or the binary specified

  Performs the manual steps outline in:
  https://chromedriver.chromium.org/downloads/version-selection

  --help   display this message
  --binary google chrome binary
  --url    download url
  --dir    the directory to install to
  `)
  process.exit(1)
}

async function getChromeVersion(binary) {
  const {code, stdout, stderr} = await new Promise((resolve, reject) => {
    const browser = spawn(binary,['--version'])
    browser.on('error', reject)
    var stdout = ''
    var stderr = ''
    browser.stdout.on('data', (data) => stdout = stdout + data)
    browser.stderr.on('data', (data) => stderr = stderr + data)
    browser.on('close', (code) => {
      const result = {code, stdout, stderr}
      if(code!=0) return reject(result)
      resolve(result)
    })
  })
  return stdout.match(/\d+\.?/g).map(v=>parseInt(v))
}

function get(url){
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      const chunks = [];
      response.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
      response.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
    }).on('error', reject)
  })
}

function toHuman(size,rod=0,suffix='') {
  if(size>1024*1024*1024*1024) return `${(size/(1024*1024*1024*1024)).toFixed(rod)}TB${suffix}`
  if(size>1024*1024*1024) return `${(size/(1024*1024*1024)).toFixed(rod)}GB${suffix}`
  if(size>1024*1024) return `${(size/(1024*1024)).toFixed(rod)}MB${suffix}`
  if(size>1024) return `${(size/1024).toFixed(rod)}KB${suffix}`
  return `${(size).toFixed(rod)}B${suffix}`
}

function unzipURL(url, outfile){
  console.log(`Download From ${url}`)
  console.log(`Extract to ${outfile}`)
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      length = response.headers['content-length']
      const prog = progress({ length, time: 100 /* ms */ })
      prog.on('progress', function(p) {
        const width = process.stdout.columns
        const pct = ('   '+p.percentage.toFixed(0)).substr(-3)+'%'
        const speed = toHuman(p.speed,2,'/s')
        const eta = p.eta.toFixed(1)+'s'
        const runtime = p.runtime.toFixed(1)+'s'
        const pre = `${pct} [`
        const post = `] ${speed} ${runtime}`
        const barLength = width-pre.length-post.length
        const filled = Math.round(barLength*p.percentage/100)
        const empty = barLength - filled
        const bar = '='.repeat(filled)+' '.repeat(empty)
        process.stdout.write('\r')
        process.stdout.write(pre)
        process.stdout.write(bar)
        process.stdout.write(post)
      })
      response
        .pipe(prog)
        .pipe(unzip.Parse())
        .on('entry', (entry) => {
          var filePath = entry.path;
          if (filePath === "chromedriver") {
            entry.pipe(fs.createWriteStream(outfile));
          } else {
            entry.autodrain();
          }
        })
        .on('finish', resolve)
    }).on('error', reject)
  })
}

function getLatestVersion(url, version) {
  return get(`${url}LATEST_RELEASE_${version[0]}.${version[1]}.${version[2]}`)
}

function getArgv(name, default_value) {
  if( !process.argv.includes("--binary") ) return default_value
  return process.argv[process.argv.indexOf(name) + 1]
}

(async() => {
  if( process.argv.includes("--help") ) usage()
  var binary = getArgv('--binary', 'google-chrome')
  var url = getArgv('--url','https://chromedriver.storage.googleapis.com/')
  var dir = getArgv('--dir',`${process.env.ROOST_APP_DIR}/tools/bin`)
  // TODO: Add support for os detection
  var os = getArgv('--os','linux64')

  const version = await getChromeVersion(binary)
  console.log(`google-chrome version: ${version.join('.')}`)
  const latestVersion = await getLatestVersion(url, version)
  console.log(`Latest chromedriver version: ${latestVersion}`)
  const chromeDriver = path.join(dir,`chromedriver_${latestVersion}_${os}`)
  const symlink = path.join(dir,`chromedriver`)
  try { await fs.promises.unlink(chromerDriver) } catch (err) {}
  await unzipURL(`https://chromedriver.storage.googleapis.com/${latestVersion}/chromedriver_${os}.zip`,chromeDriver)
  await fs.promises.chmod(chromeDriver, 0o775)
  try { await fs.promises.unlink(symlink) } catch (err) {}
  await fs.promises.symlink(chromeDriver,symlink)
  console.log('')
})()
